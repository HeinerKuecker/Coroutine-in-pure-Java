package de.heinerkuecker.coroutine;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Objects;

/**
 * Variables {@link Map} with
 * type check at runtime.
 *
 * @author Heiner K&uuml;cker
 */
public class Variables
implements Iterable<Entry<String, Object>>
{
    private final HashMap<String, Object> values = new HashMap<>();

    private final HashMap<String, Class<?>> types = new HashMap<>();


    public Object get(
            final String variableName )
    {
        // TODO throw exception, when variableName is unknown
        return this.values.get(
                Objects.requireNonNull(
                        variableName ) );
    }

    public void declare(
            final String variableName ,
            final Class<?> type )
    {
        if ( types.containsKey( variableName ) )
        {
            throw new Variables.VariableAlreadyDeclaredException(
                    variableName );
        }

        this.types.put(
                Objects.requireNonNull(
                        variableName ) ,
                Objects.requireNonNull(
                        type ) );
    }

    /**
     * Convinience method.
     *
     * @param variableName
     * @param type
     * @param value
     */
    public <T> void declare(
            final String variableName ,
            final Class<T> type ,
            final T value )
    {
        declare(
                variableName ,
                type );

        set(
                Objects.requireNonNull(
                        variableName ) ,
                value );
    }

    public void set(
            final String variableName ,
            final Object value )
    {
        if ( value == null )
        {
            this.values.remove(
                    Objects.requireNonNull(
                            variableName ) );
        }
        else
        {
            if ( types.containsKey( variableName ) )
            {
                if ( ! types.get( variableName ).isInstance( value ) )
                {
                    //throw new ClassCastException( value.getClass().toString() );
                    throw new Variables.WrongVariableClassException(
                            variableName ,
                            // expectedClass
                            types.get( variableName ) ,
                            // wrongValue
                            value );
                }
            }

            this.values.put(
                    Objects.requireNonNull(
                            variableName ) ,
                    value );
        }
    }

    /**
     * @see Object#toString()
     */
    @Override
    public String toString()
    {
        //return "Variables [innerVars=" + this.innerVars + "]";
        return String.valueOf( this.values );
    }

    /**
     * @see java.lang.Iterable#iterator()
     */
    @Override
    public Iterator<Entry<String, Object>> iterator()
    {
        return this.values.entrySet().iterator();
    }

    /**
     * Exception
     */
    public static class VariableAlreadyDeclaredException
    extends RuntimeException
    {
        /**
         * Generated by Eclipse.
         */
        private static final long serialVersionUID = 462065284743881352L;

        /**
         * @param message
         */
        public VariableAlreadyDeclaredException(
                final String variableName )
        {
            super( "variable already declared: " + variableName );
        }
    }

    /**
     * Exception
     */
    public static class WrongVariableClassException
    extends RuntimeException
    {
        /**
         * Generated by Eclipse.
         */
        private static final long serialVersionUID = -3843489649279228520L;

        /**
         * @param message
         */
        public WrongVariableClassException(
                final String variableName ,
                final Class<?> expectedClass ,
                final Object wrongValue )
        {
            super(
                    "wrong variable class for variable: " +
                    variableName + ", " +
                    "expected class: " +
                    expectedClass + ", " +
                    "wrong value: " +
                    wrongValue + " " +
                    "wrong class: " +
                    wrongValue.getClass() );
        }
    }

}
